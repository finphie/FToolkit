// <auto-generated/>
// 上記はSA1201誤検知の回避策。（prgma warningは効かない）

using CommunityToolkit.Diagnostics;
using CommunityToolkit.HighPerformance.Buffers;
using FToolkit.Objects;

namespace FToolkit.IO.Extensions;

/// <summary>
/// <see cref="Path"/>クラス関連の拡張メソッドです。
/// </summary>
public static class PathExtensions
{
    const int GuidLength = 32 + 4;
    const string TempExtension = ".tmp";

#pragma warning disable CA1034, CS1591
    extension(Path)
#pragma warning restore CA1034, CS1591
    {
        /// <summary>
        /// ディレクトリのパスとファイル名を結合して、1つのファイルパスにします。
        /// </summary>
        /// <param name="directoryPath">ファイル名を追加するディレクトリパス</param>
        /// <param name="fileName">ディレクトリパスに追加するファイル名</param>
        /// <returns>結合されたディレクトリとファイル名を表すファイルパスを返します。</returns>
        public static FilePath Join(DirectoryPath directoryPath, FileName fileName)
            => new(Path.Join(directoryPath.AsPrimitive(), fileName.AsPrimitive()));

        /// <summary>
        /// ディレクトリのパス、ディレクトリ名、ファイル名を結合して、1つのファイルパスにします。
        /// </summary>
        /// <param name="directoryPath">ディレクトリ名とファイル名を追加するディレクトリのパス</param>
        /// <param name="directoryName">ディレクトリパスに追加するディレクトリ名</param>
        /// <param name="fileName">結合したディレクトリパスに追加するファイル名</param>
        /// <returns>結合されたディレクトリ名とファイル名を表すファイルパスを返します。</returns>
        public static FilePath Join(DirectoryPath directoryPath, DirectoryName directoryName, FileName fileName)
            => new(Path.Join(directoryPath.AsPrimitive(), directoryName.AsPrimitive(), fileName.AsPrimitive()));

        /// <summary>
        /// ディレクトリのパスとディレクトリ名を結合して、1つのファイルパスにします。
        /// </summary>
        /// <param name="directoryPath">ディレクトリ名を追加するディレクトリのパス</param>
        /// <param name="directoryName">ディレクトリパスに追加するディレクトリ名</param>
        /// <returns>結合されたディレクトリ名を表すディレクトリのパスを返します。</returns>
        public static DirectoryPath Join(DirectoryPath directoryPath, DirectoryName directoryName)
            => new(Path.Join(directoryPath.AsPrimitive(), directoryName.AsPrimitive()));

        /// <summary>
        /// 拡張子なしの一時ファイル名を取得します。
        /// </summary>
        /// <returns>拡張子なしの一時ファイル名を返します。</returns>
        public static FileName GetUniqueTempFileNameWithoutExtension()
            => new(Guid.NewGuid().ToString());

        /// <summary>
        /// 一時ファイル名を取得します。
        /// </summary>
        /// <returns>一時ファイル名を返します。</returns>
        public static FileName GetUniqueTempFileName()
            => new(GetTempFileNameInternal(TempExtension));

        /// <summary>
        /// 一時ファイル名を取得します。
        /// </summary>
        /// <param name="extension">拡張子</param>
        /// <returns>一時ファイル名を返します。</returns>
        /// <exception cref="ArgumentException">拡張子が空文字または先頭の文字が"."ではありません。</exception>
        /// <exception cref="ArgumentOutOfRangeException">"."を含む拡張子の長さが1以下です。</exception>
        public static FileName GetUniqueTempFileName(ReadOnlySpan<char> extension)
        {
            Guard.IsInRangeFor(1, extension);
            Guard.IsEqualTo(extension[0], '.');

            return new(GetTempFileNameInternal(extension));
        }

        /// <summary>
        /// .tmp拡張子の一時ファイルパスを取得します。
        /// </summary>
        /// <returns>.tmp拡張子の一時ファイルパスを返します。</returns>
        public static FilePath GetTempFilePath()
            => new(GetTempFilePathInternal(TempExtension));

        /// <summary>
        /// 指定された拡張子の一時ファイルパスを取得します。
        /// </summary>
        /// <param name="extension">拡張子</param>
        /// <returns>指定された拡張子の一時ファイルパスを返します。</returns>
        /// <exception cref="ArgumentException">拡張子が空文字または先頭の文字が"."ではありません。</exception>
        /// <exception cref="ArgumentOutOfRangeException">"."を含む拡張子の長さが1以下です。</exception>
        public static FilePath GetTempFilePath(ReadOnlySpan<char> extension)
        {
            Guard.IsInRangeFor(1, extension);
            Guard.IsEqualTo(extension[0], '.');

            return new(GetTempFilePathInternal(extension));
        }

        /// <summary>
        /// 指定されたディレクトリを親とする、指定された拡張子の一時ファイルを取得します。
        /// </summary>
        /// <param name="parentDirectoryPath">親ディレクトリのパス</param>
        /// <param name="extension">拡張子</param>
        /// <returns>指定された拡張子の一時ファイルパスを返します。</returns>
        /// <exception cref="ArgumentException">
        /// 親ディレクトリのパスが空文字です。
        /// または、拡張子が空文字または先頭の文字が"."ではありません。
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// 親ディレクトリパスの長さが1未満です。
        /// または、"."を含む拡張子の長さが1以下です。
        /// </exception>
        public static FilePath GetTempFilePath(ReadOnlySpan<char> parentDirectoryPath, ReadOnlySpan<char> extension)
        {
            Guard.IsNotEmpty(parentDirectoryPath);
            Guard.IsInRangeFor(1, extension);
            Guard.IsEqualTo(extension[0], '.');

            using var buffer = SpanOwner<char>.Allocate(GuidLength + extension.Length);
            var destination = buffer.Span;

            GenerateTempFileNameInternal(destination, extension);
            return new(Path.Join(Path.GetTempPath(), parentDirectoryPath, destination));
        }

        /// <summary>
        /// 一時ディレクトリのパスを取得します。
        /// </summary>
        /// <returns>一時ディレクトリのパスを返します。</returns>
        public static DirectoryPath GetTempDirectoryPath()
            => new(Path.GetTempPath());
    }

    static string GetTempFileNameInternal(ReadOnlySpan<char> extension)
    {
        using var buffer = SpanOwner<char>.Allocate(GuidLength + extension.Length);
        GenerateTempFileNameInternal(buffer.Span, extension);
        return buffer.ToString();
    }

    static string GetTempFilePathInternal(ReadOnlySpan<char> extension)
    {
        using var buffer = SpanOwner<char>.Allocate(GuidLength + extension.Length);
        var destination = buffer.Span;

        GenerateTempFileNameInternal(destination, extension);
        return Path.Join(Path.GetTempPath(), destination);
    }

    static void GenerateTempFileNameInternal(Span<char> destination, ReadOnlySpan<char> extension)
    {
        var guid = Guid.NewGuid();
        guid.TryFormat(destination, out _);
        extension.CopyTo(destination[GuidLength..]);
    }
}
